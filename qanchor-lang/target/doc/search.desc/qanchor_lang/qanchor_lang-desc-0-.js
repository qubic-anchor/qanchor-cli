searchState.loadedDescShard("qanchor_lang", 0, "QAnchor Language Framework\nThe <code>#[derive(Accounts)]</code> macro\nContains the error value\nContains the success value\nAccount types and traits for QAnchor programs\nContext types for QAnchor instruction handling\nError handling for QAnchor programs\nProgram execution and instruction dispatch\nThe <code>#[program]</code> attribute macro\nEntry point macro for QAnchor programs\nAssert macro for program validation\nMacro for defining custom error codes\nAccount wrapper for validated account data\nAccount constraints for validation\nTrait for account validation\nAccount constraint validation\nCustom constraint with validation logic\nAccount must be initialized (created) in this instruction\nAccount must be mutable\nAccount must be owned by the specified program\nProgram account type\nTrait for program interfaces\nSigner account type\nAccount must be a signer\nSystem program interface\nThe underlying account info\nThe underlying account info\nThe underlying account info\nThe deserialized account data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the account’s public key\nGet the signer’s public key\nGet the program’s ID\nThe program’s ID\nReload the account data from the account info\nTry to deserialize and validate accounts from the given …\nLoad and validate an account\nCreate a new Signer, validating that the account signed …\nCreate a new Program reference, validating the program ID\nValidate the constraint against the account\nAccount information from the Qubic runtime\nContext for instruction execution\nThe validated accounts for this instruction\nThe account’s balance (in Qubic units)\nThe account’s data\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this account is owned by the given program\nWhether this account signed the transaction\nWhether this account is writable\nThe account’s public key (32 bytes for Qubic)\nCreate a new Context\nCreate a new AccountInfo\nThe program that owns this account\nProgram ID of the executing program\nRemaining accounts not specified in the accounts struct\nDeserialize account data into a type\nSerialize and write data to the account\nContains the error value\nStandard error codes for QAnchor programs\nContains the success value\nResult type alias for QAnchor programs\nGet the error code as a u32\nGet a human-readable description of the error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>#[derive(Accounts)]</code> macro\nThe <code>#[program]</code> attribute macro\nAssert macro for program validation\nMacro for defining custom error codes\nProgram instruction dispatcher\nInstruction parameter extraction\nTrait for QAnchor programs\nSystem calls interface for Qubic programs\nCreate a new account (placeholder for Qubic system call)\nDispatch an instruction to its handler\nExecute an instruction with the given instruction data and …\nExtract parameters from instruction data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current block height (placeholder for Qubic system …\nGet current timestamp (placeholder for Qubic system call)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog a message (placeholder for Qubic system call)\nTransfer funds between accounts (placeholder for Qubic …")